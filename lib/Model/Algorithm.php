<?php
/**
 * Algorithm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Exatia\GraphhopperRouteOptimizationClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Route Optimization API
 *
 * Our Route Optimization API solves the so called vehicle routing problem fast. It calculates an optimal tour for a set of vehicles, services and constraints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Exatia\GraphhopperRouteOptimizationClient\Model;

use \ArrayAccess;

/**
 * Algorithm Class Doc Comment
 *
 * @category    Class
 * @package     Exatia\GraphhopperRouteOptimizationClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Algorithm implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Algorithm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'problem_type' => 'string',
        'objective' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'problem_type' => 'problem_type',
        'objective' => 'objective'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'problem_type' => 'setProblemType',
        'objective' => 'setObjective'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'problem_type' => 'getProblemType',
        'objective' => 'getObjective'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const PROBLEM_TYPE_MIN = 'min';
    const PROBLEM_TYPE_MIN_MAX = 'min-max';
    const OBJECTIVE_TRANSPORT_TIME = 'transport_time';
    const OBJECTIVE_COMPLETION_TIME = 'completion_time';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getProblemTypeAllowableValues()
    {
        return [
            self::PROBLEM_TYPE_MIN,
            self::PROBLEM_TYPE_MIN_MAX,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getObjectiveAllowableValues()
    {
        return [
            self::OBJECTIVE_TRANSPORT_TIME,
            self::OBJECTIVE_COMPLETION_TIME,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['problem_type'] = isset($data['problem_type']) ? $data['problem_type'] : null;
        $this->container['objective'] = isset($data['objective']) ? $data['objective'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("min", "min-max");
        if (!in_array($this->container['problem_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'problem_type', must be one of #{allowed_values}.";
        }
        $allowed_values = array("transport_time", "completion_time");
        if (!in_array($this->container['objective'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'objective', must be one of #{allowed_values}.";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("min", "min-max");
        if (!in_array($this->container['problem_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("transport_time", "completion_time");
        if (!in_array($this->container['objective'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets problem_type
     * @return string
     */
    public function getProblemType()
    {
        return $this->container['problem_type'];
    }

    /**
     * Sets problem_type
     * @param string $problem_type
     * @return $this
     */
    public function setProblemType($problem_type)
    {
        $allowed_values = array('min', 'min-max');
        if (!in_array($problem_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'problem_type', must be one of 'min', 'min-max'");
        }
        $this->container['problem_type'] = $problem_type;

        return $this;
    }

    /**
     * Gets objective
     * @return string
     */
    public function getObjective()
    {
        return $this->container['objective'];
    }

    /**
     * Sets objective
     * @param string $objective
     * @return $this
     */
    public function setObjective($objective)
    {
        $allowed_values = array('transport_time', 'completion_time');
        if (!in_array($objective, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'objective', must be one of 'transport_time', 'completion_time'");
        }
        $this->container['objective'] = $objective;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Exatia\GraphhopperRouteOptimizationClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Exatia\GraphhopperRouteOptimizationClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}
