<?php
/**
 * Request
 *
 * PHP version 5
 *
 * @category Class
 * @package  Exatia\GraphhopperRouteOptimizationClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Exatia\GraphhopperRouteOptimizationClient\Model;

use \ArrayAccess;
/**
 * Request Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Exatia\GraphhopperRouteOptimizationClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Request implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'Request';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'vehicles' => '\Exatia\GraphhopperRouteOptimizationClient\Model\Vehicle[]',
        'vehicle_types' => '\Exatia\GraphhopperRouteOptimizationClient\Model\VehicleType[]',
        'services' => '\Exatia\GraphhopperRouteOptimizationClient\Model\Service[]',
        'shipments' => '\Exatia\GraphhopperRouteOptimizationClient\Model\Shipment[]',
        'relations' => '\Exatia\GraphhopperRouteOptimizationClient\Model\Relation[]',
        'algorithm' => '\Exatia\GraphhopperRouteOptimizationClient\Model\Algorithm'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'vehicles' => 'vehicles',
        'vehicle_types' => 'vehicle_types',
        'services' => 'services',
        'shipments' => 'shipments',
        'relations' => 'relations',
        'algorithm' => 'algorithm'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'vehicles' => 'setVehicles',
        'vehicle_types' => 'setVehicleTypes',
        'services' => 'setServices',
        'shipments' => 'setShipments',
        'relations' => 'setRelations',
        'algorithm' => 'setAlgorithm'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'vehicles' => 'getVehicles',
        'vehicle_types' => 'getVehicleTypes',
        'services' => 'getServices',
        'shipments' => 'getShipments',
        'relations' => 'getRelations',
        'algorithm' => 'getAlgorithm'
    );
  
    static function getters() {
        return self::$getters;
    }

    /**
      * $vehicles An array of vehicles that can be employed
      * @var \Exatia\GraphhopperRouteOptimizationClient\Model\Vehicle[]
      */
    protected $vehicles;
    /**
      * $vehicle_types An array of vehicle types
      * @var \Exatia\GraphhopperRouteOptimizationClient\Model\VehicleType[]
      */
    protected $vehicle_types;
    /**
      * $services An array of services
      * @var \Exatia\GraphhopperRouteOptimizationClient\Model\Service[]
      */
    protected $services;
    /**
      * $shipments An array of shipments
      * @var \Exatia\GraphhopperRouteOptimizationClient\Model\Shipment[]
      */
    protected $shipments;
    /**
      * $relations An array of relations
      * @var \Exatia\GraphhopperRouteOptimizationClient\Model\Relation[]
      */
    protected $relations;
    /**
      * $algorithm 
      * @var \Exatia\GraphhopperRouteOptimizationClient\Model\Algorithm
      */
    protected $algorithm;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        
        if ($data != null) {
            $this->vehicles = $data["vehicles"];
            $this->vehicle_types = $data["vehicle_types"];
            $this->services = $data["services"];
            $this->shipments = $data["shipments"];
            $this->relations = $data["relations"];
            $this->algorithm = $data["algorithm"];
        }
    }
    /**
     * Gets vehicles
     * @return \Exatia\GraphhopperRouteOptimizationClient\Model\Vehicle[]
     */
    public function getVehicles()
    {
        return $this->vehicles;
    }
  
    /**
     * Sets vehicles
     * @param \Exatia\GraphhopperRouteOptimizationClient\Model\Vehicle[] $vehicles An array of vehicles that can be employed
     * @return $this
     */
    public function setVehicles($vehicles)
    {
        
        $this->vehicles = $vehicles;
        return $this;
    }
    /**
     * Gets vehicle_types
     * @return \Exatia\GraphhopperRouteOptimizationClient\Model\VehicleType[]
     */
    public function getVehicleTypes()
    {
        return $this->vehicle_types;
    }
  
    /**
     * Sets vehicle_types
     * @param \Exatia\GraphhopperRouteOptimizationClient\Model\VehicleType[] $vehicle_types An array of vehicle types
     * @return $this
     */
    public function setVehicleTypes($vehicle_types)
    {
        
        $this->vehicle_types = $vehicle_types;
        return $this;
    }
    /**
     * Gets services
     * @return \Exatia\GraphhopperRouteOptimizationClient\Model\Service[]
     */
    public function getServices()
    {
        return $this->services;
    }
  
    /**
     * Sets services
     * @param \Exatia\GraphhopperRouteOptimizationClient\Model\Service[] $services An array of services
     * @return $this
     */
    public function setServices($services)
    {
        
        $this->services = $services;
        return $this;
    }
    /**
     * Gets shipments
     * @return \Exatia\GraphhopperRouteOptimizationClient\Model\Shipment[]
     */
    public function getShipments()
    {
        return $this->shipments;
    }
  
    /**
     * Sets shipments
     * @param \Exatia\GraphhopperRouteOptimizationClient\Model\Shipment[] $shipments An array of shipments
     * @return $this
     */
    public function setShipments($shipments)
    {
        
        $this->shipments = $shipments;
        return $this;
    }
    /**
     * Gets relations
     * @return \Exatia\GraphhopperRouteOptimizationClient\Model\Relation[]
     */
    public function getRelations()
    {
        return $this->relations;
    }
  
    /**
     * Sets relations
     * @param \Exatia\GraphhopperRouteOptimizationClient\Model\Relation[] $relations An array of relations
     * @return $this
     */
    public function setRelations($relations)
    {
        
        $this->relations = $relations;
        return $this;
    }
    /**
     * Gets algorithm
     * @return \Exatia\GraphhopperRouteOptimizationClient\Model\Algorithm
     */
    public function getAlgorithm()
    {
        return $this->algorithm;
    }
  
    /**
     * Sets algorithm
     * @param \Exatia\GraphhopperRouteOptimizationClient\Model\Algorithm $algorithm
     * @return $this
     */
    public function setAlgorithm($algorithm)
    {
        
        $this->algorithm = $algorithm;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Exatia\GraphhopperRouteOptimizationClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Exatia\GraphhopperRouteOptimizationClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}
