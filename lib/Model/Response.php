<?php
/**
 * Response
 *
 * PHP version 5
 *
 * @category Class
 * @package  Exatia\GraphhopperRouteOptimizationClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Exatia\GraphhopperRouteOptimizationClient\Model;

use \ArrayAccess;
/**
 * Response Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Exatia\GraphhopperRouteOptimizationClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Response implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'Response';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'job_id' => 'string',
        'status' => 'string',
        'waiting_in_queue' => 'int',
        'processing_time' => 'int',
        'solution' => '\Exatia\GraphhopperRouteOptimizationClient\Model\Solution'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'job_id' => 'job_id',
        'status' => 'status',
        'waiting_in_queue' => 'waiting_in_queue',
        'processing_time' => 'processing_time',
        'solution' => 'solution'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'job_id' => 'setJobId',
        'status' => 'setStatus',
        'waiting_in_queue' => 'setWaitingInQueue',
        'processing_time' => 'setProcessingTime',
        'solution' => 'setSolution'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'job_id' => 'getJobId',
        'status' => 'getStatus',
        'waiting_in_queue' => 'getWaitingInQueue',
        'processing_time' => 'getProcessingTime',
        'solution' => 'getSolution'
    );
  
    static function getters() {
        return self::$getters;
    }

    /**
      * $job_id unique identify of job - which you get when posting your request to the large problem solver
      * @var string
      */
    protected $job_id;
    /**
      * $status indicates the current status of the job
      * @var string
      */
    protected $status;
    /**
      * $waiting_in_queue waiting time in ms
      * @var int
      */
    protected $waiting_in_queue;
    /**
      * $processing_time processing time in ms. if job is still waiting in queue, processing_time is 0
      * @var int
      */
    protected $processing_time;
    /**
      * $solution the solution. only available if status field indicates finished
      * @var \Exatia\GraphhopperRouteOptimizationClient\Model\Solution
      */
    protected $solution;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        
        if ($data != null) {
            $this->job_id = $data["job_id"];
            $this->status = $data["status"];
            $this->waiting_in_queue = $data["waiting_in_queue"];
            $this->processing_time = $data["processing_time"];
            $this->solution = $data["solution"];
        }
    }
    /**
     * Gets job_id
     * @return string
     */
    public function getJobId()
    {
        return $this->job_id;
    }
  
    /**
     * Sets job_id
     * @param string $job_id unique identify of job - which you get when posting your request to the large problem solver
     * @return $this
     */
    public function setJobId($job_id)
    {
        
        $this->job_id = $job_id;
        return $this;
    }
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status indicates the current status of the job
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array("waiting_in_queue", "processing", "finished");
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'waiting_in_queue', 'processing', 'finished'");
        }
        $this->status = $status;
        return $this;
    }
    /**
     * Gets waiting_in_queue
     * @return int
     */
    public function getWaitingInQueue()
    {
        return $this->waiting_in_queue;
    }
  
    /**
     * Sets waiting_in_queue
     * @param int $waiting_in_queue waiting time in ms
     * @return $this
     */
    public function setWaitingInQueue($waiting_in_queue)
    {
        
        $this->waiting_in_queue = $waiting_in_queue;
        return $this;
    }
    /**
     * Gets processing_time
     * @return int
     */
    public function getProcessingTime()
    {
        return $this->processing_time;
    }
  
    /**
     * Sets processing_time
     * @param int $processing_time processing time in ms. if job is still waiting in queue, processing_time is 0
     * @return $this
     */
    public function setProcessingTime($processing_time)
    {
        
        $this->processing_time = $processing_time;
        return $this;
    }
    /**
     * Gets solution
     * @return \Exatia\GraphhopperRouteOptimizationClient\Model\Solution
     */
    public function getSolution()
    {
        return $this->solution;
    }
  
    /**
     * Sets solution
     * @param \Exatia\GraphhopperRouteOptimizationClient\Model\Solution $solution the solution. only available if status field indicates finished
     * @return $this
     */
    public function setSolution($solution)
    {
        
        $this->solution = $solution;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Exatia\GraphhopperRouteOptimizationClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Exatia\GraphhopperRouteOptimizationClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}
