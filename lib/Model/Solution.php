<?php
/**
 * Solution
 *
 * PHP version 5
 *
 * @category Class
 * @package  Exatia\GraphhopperRouteOptimizationClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Exatia\GraphhopperRouteOptimizationClient\Model;

use \ArrayAccess;
/**
 * Solution Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Exatia\GraphhopperRouteOptimizationClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Solution implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'Solution';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'costs' => 'int',
        'distance' => 'int',
        'time' => 'int',
        'no_unassigned' => 'int',
        'routes' => '\Exatia\GraphhopperRouteOptimizationClient\Model\Route[]',
        'unassigned' => '\Exatia\GraphhopperRouteOptimizationClient\Model\SolutionUnassigned'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'costs' => 'costs',
        'distance' => 'distance',
        'time' => 'time',
        'no_unassigned' => 'no_unassigned',
        'routes' => 'routes',
        'unassigned' => 'unassigned'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'costs' => 'setCosts',
        'distance' => 'setDistance',
        'time' => 'setTime',
        'no_unassigned' => 'setNoUnassigned',
        'routes' => 'setRoutes',
        'unassigned' => 'setUnassigned'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'costs' => 'getCosts',
        'distance' => 'getDistance',
        'time' => 'getTime',
        'no_unassigned' => 'getNoUnassigned',
        'routes' => 'getRoutes',
        'unassigned' => 'getUnassigned'
    );
  
    static function getters() {
        return self::$getters;
    }

    /**
      * $costs overall costs of solution
      * @var int
      */
    protected $costs;
    /**
      * $distance overall travel distance in meters
      * @var int
      */
    protected $distance;
    /**
      * $time overall travel time in ms
      * @var int
      */
    protected $time;
    /**
      * $no_unassigned number of jobs that could not be assigned to final solution
      * @var int
      */
    protected $no_unassigned;
    /**
      * $routes An array of routes
      * @var \Exatia\GraphhopperRouteOptimizationClient\Model\Route[]
      */
    protected $routes;
    /**
      * $unassigned 
      * @var \Exatia\GraphhopperRouteOptimizationClient\Model\SolutionUnassigned
      */
    protected $unassigned;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        
        if ($data != null) {
            $this->costs = $data["costs"];
            $this->distance = $data["distance"];
            $this->time = $data["time"];
            $this->no_unassigned = $data["no_unassigned"];
            $this->routes = $data["routes"];
            $this->unassigned = $data["unassigned"];
        }
    }
    /**
     * Gets costs
     * @return int
     */
    public function getCosts()
    {
        return $this->costs;
    }
  
    /**
     * Sets costs
     * @param int $costs overall costs of solution
     * @return $this
     */
    public function setCosts($costs)
    {
        
        $this->costs = $costs;
        return $this;
    }
    /**
     * Gets distance
     * @return int
     */
    public function getDistance()
    {
        return $this->distance;
    }
  
    /**
     * Sets distance
     * @param int $distance overall travel distance in meters
     * @return $this
     */
    public function setDistance($distance)
    {
        
        $this->distance = $distance;
        return $this;
    }
    /**
     * Gets time
     * @return int
     */
    public function getTime()
    {
        return $this->time;
    }
  
    /**
     * Sets time
     * @param int $time overall travel time in ms
     * @return $this
     */
    public function setTime($time)
    {
        
        $this->time = $time;
        return $this;
    }
    /**
     * Gets no_unassigned
     * @return int
     */
    public function getNoUnassigned()
    {
        return $this->no_unassigned;
    }
  
    /**
     * Sets no_unassigned
     * @param int $no_unassigned number of jobs that could not be assigned to final solution
     * @return $this
     */
    public function setNoUnassigned($no_unassigned)
    {
        
        $this->no_unassigned = $no_unassigned;
        return $this;
    }
    /**
     * Gets routes
     * @return \Exatia\GraphhopperRouteOptimizationClient\Model\Route[]
     */
    public function getRoutes()
    {
        return $this->routes;
    }
  
    /**
     * Sets routes
     * @param \Exatia\GraphhopperRouteOptimizationClient\Model\Route[] $routes An array of routes
     * @return $this
     */
    public function setRoutes($routes)
    {
        
        $this->routes = $routes;
        return $this;
    }
    /**
     * Gets unassigned
     * @return \Exatia\GraphhopperRouteOptimizationClient\Model\SolutionUnassigned
     */
    public function getUnassigned()
    {
        return $this->unassigned;
    }
  
    /**
     * Sets unassigned
     * @param \Exatia\GraphhopperRouteOptimizationClient\Model\SolutionUnassigned $unassigned
     * @return $this
     */
    public function setUnassigned($unassigned)
    {
        
        $this->unassigned = $unassigned;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Exatia\GraphhopperRouteOptimizationClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Exatia\GraphhopperRouteOptimizationClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}
