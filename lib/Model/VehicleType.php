<?php
/**
 * VehicleType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Exatia\GraphhopperRouteOptimizationClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Exatia\GraphhopperRouteOptimizationClient\Model;

use \ArrayAccess;
/**
 * VehicleType Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Exatia\GraphhopperRouteOptimizationClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VehicleType implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'VehicleType';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'type_id' => 'string',
        'profile' => 'string',
        'capacity' => 'int[]',
        'speed_factor' => 'double',
        'service_time_factor' => 'double'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'type_id' => 'type_id',
        'profile' => 'profile',
        'capacity' => 'capacity',
        'speed_factor' => 'speed_factor',
        'service_time_factor' => 'service_time_factor'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'type_id' => 'setTypeId',
        'profile' => 'setProfile',
        'capacity' => 'setCapacity',
        'speed_factor' => 'setSpeedFactor',
        'service_time_factor' => 'setServiceTimeFactor'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'type_id' => 'getTypeId',
        'profile' => 'getProfile',
        'capacity' => 'getCapacity',
        'speed_factor' => 'getSpeedFactor',
        'service_time_factor' => 'getServiceTimeFactor'
    );
  
    static function getters() {
        return self::$getters;
    }

    /**
      * $type_id Unique identifier for the vehicle type
      * @var string
      */
    protected $type_id;
    /**
      * $profile Profile of vehicle type
      * @var string
      */
    protected $profile;
    /**
      * $capacity array of capacity dimensions
      * @var int[]
      */
    protected $capacity;
    /**
      * $speed_factor speed_factor of vehicle type
      * @var double
      */
    protected $speed_factor;
    /**
      * $service_time_factor service time factor of vehicle type
      * @var double
      */
    protected $service_time_factor;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        
        if ($data != null) {
            $this->type_id = $data["type_id"];
            $this->profile = $data["profile"];
            $this->capacity = $data["capacity"];
            $this->speed_factor = $data["speed_factor"];
            $this->service_time_factor = $data["service_time_factor"];
        }
    }
    /**
     * Gets type_id
     * @return string
     */
    public function getTypeId()
    {
        return $this->type_id;
    }
  
    /**
     * Sets type_id
     * @param string $type_id Unique identifier for the vehicle type
     * @return $this
     */
    public function setTypeId($type_id)
    {
        
        $this->type_id = $type_id;
        return $this;
    }
    /**
     * Gets profile
     * @return string
     */
    public function getProfile()
    {
        return $this->profile;
    }
  
    /**
     * Sets profile
     * @param string $profile Profile of vehicle type
     * @return $this
     */
    public function setProfile($profile)
    {
        $allowed_values = array("car", "bike", "foot", "mtb", "motorcycle", "racingbike", "truck", "small_truck", "bus");
        if (!in_array($profile, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'profile', must be one of 'car', 'bike', 'foot', 'mtb', 'motorcycle', 'racingbike', 'truck', 'small_truck', 'bus'");
        }
        $this->profile = $profile;
        return $this;
    }
    /**
     * Gets capacity
     * @return int[]
     */
    public function getCapacity()
    {
        return $this->capacity;
    }
  
    /**
     * Sets capacity
     * @param int[] $capacity array of capacity dimensions
     * @return $this
     */
    public function setCapacity($capacity)
    {
        
        $this->capacity = $capacity;
        return $this;
    }
    /**
     * Gets speed_factor
     * @return double
     */
    public function getSpeedFactor()
    {
        return $this->speed_factor;
    }
  
    /**
     * Sets speed_factor
     * @param double $speed_factor speed_factor of vehicle type
     * @return $this
     */
    public function setSpeedFactor($speed_factor)
    {
        
        $this->speed_factor = $speed_factor;
        return $this;
    }
    /**
     * Gets service_time_factor
     * @return double
     */
    public function getServiceTimeFactor()
    {
        return $this->service_time_factor;
    }
  
    /**
     * Sets service_time_factor
     * @param double $service_time_factor service time factor of vehicle type
     * @return $this
     */
    public function setServiceTimeFactor($service_time_factor)
    {
        
        $this->service_time_factor = $service_time_factor;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Exatia\GraphhopperRouteOptimizationClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Exatia\GraphhopperRouteOptimizationClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}
